{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server for AutoBan.",
        "title": "AutoBan API",
        "contact": {},
        "license": {
            "name": "GNU General Public License v3.0",
            "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all users with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Users"
                ],
                "summary": "List all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListUsersResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin access required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/admin/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Users"
                ],
                "summary": "Get user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin access required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin access required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin access required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/admin/users/{id}/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change the password of a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Users"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Change user password request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ChangeUserPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User password changed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin access required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/admin/users/{id}/role": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change the role of a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Users"
                ],
                "summary": "Change user role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Change user role request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ChangeUserRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User role changed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin access required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/admin/users/{id}/status": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change the status of a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Users"
                ],
                "summary": "Change user status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Change user status request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ChangeUserStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User status changed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin access required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/admin/vehicles/brands": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new vehicle brand",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Brands"
                ],
                "summary": "Create a new vehicle brand",
                "parameters": [
                    {
                        "description": "Vehicle Brand",
                        "name": "brand",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateVehicleBrandRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.VehicleBrandResponse"
                        }
                    }
                }
            }
        },
        "/admin/vehicles/brands/{brandId}/models": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new vehicle model",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Models"
                ],
                "summary": "Create a new vehicle model",
                "parameters": [
                    {
                        "description": "Vehicle Model",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateVehicleModelRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.VehicleModelResponse"
                        }
                    }
                }
            }
        },
        "/admin/vehicles/brands/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a vehicle brand",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Brands"
                ],
                "summary": "Update a vehicle brand",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Brand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Vehicle Brand",
                        "name": "brand",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateVehicleBrandRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.VehicleBrandResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a vehicle brand",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Brands"
                ],
                "summary": "Delete a vehicle brand",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Brand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/admin/vehicles/generations": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new vehicle generation",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Generations"
                ],
                "summary": "Create a new vehicle generation",
                "parameters": [
                    {
                        "description": "Vehicle Generation",
                        "name": "generation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateVehicleGenerationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.VehicleGenerationResponse"
                        }
                    }
                }
            }
        },
        "/admin/vehicles/generations/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a vehicle generation",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Generations"
                ],
                "summary": "Update a vehicle generation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle generation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Vehicle Generation",
                        "name": "generation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateVehicleGenerationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.VehicleGenerationResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a vehicle generation",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Generations"
                ],
                "summary": "Delete a vehicle generation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Generation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/admin/vehicles/models/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a vehicle model",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Models"
                ],
                "summary": "Update a vehicle model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Model ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Vehicle Model",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateVehicleModelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.VehicleModelResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a vehicle model",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Models"
                ],
                "summary": "Delete a vehicle model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Model ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/admin/vehicles/types": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new vehicle type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Types"
                ],
                "summary": "Create a new vehicle type",
                "parameters": [
                    {
                        "description": "Vehicle Type",
                        "name": "vehicleType",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateVehicleTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.VehicleTypeResponse"
                        }
                    }
                }
            }
        },
        "/admin/vehicles/types/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a vehicle type",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Types"
                ],
                "summary": "Update a vehicle type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Type ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Vehicle Type",
                        "name": "vehicleType",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateVehicleTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.VehicleTypeResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a vehicle type",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Admin - Types"
                ],
                "summary": "Delete a vehicle type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Type ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Login a user with phone number and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logout a user by invalidating the refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User logout",
                "parameters": [
                    {
                        "description": "Refresh token to invalidate",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/logout-all": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logs out the user from all devices by invalidating all refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout from all devices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "post": {
                "description": "Get new access and refresh tokens using a valid refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Current refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user with phone number and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/sessions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all active sessions for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get user sessions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetSessionsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user/vehicles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all user vehicle",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User - Vehicles"
                ],
                "summary": "List all user vehicles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListUserVehiclesResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add new vehicle to user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User - Vehicles"
                ],
                "summary": "Add new vehicle to",
                "parameters": [
                    {
                        "description": "UserVehicle Type",
                        "name": "vehicleType",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserVehicleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.UserVehicleResponse"
                        }
                    }
                }
            }
        },
        "/user/vehicles/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a specific user vehicle",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User - Vehicles"
                ],
                "summary": "Get user vehicle details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Vehicle ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserVehicleResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the details of a specific user vehicle",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User - Vehicles"
                ],
                "summary": "Update user vehicle details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Vehicle ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User Vehicle",
                        "name": "userVehicle",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserVehicleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserVehicleRequest"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user vehicle",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User - Vehicles"
                ],
                "summary": "delete a user vehicle",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Vehicle ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the profile information of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetProfileResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the profile information of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Profile update information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete user",
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/me/change-password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the password of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user password",
                "parameters": [
                    {
                        "description": "Password update information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/vehicles/brands": {
            "get": {
                "description": "Get a list of all available vehicle brands",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brands"
                ],
                "summary": "List all vehicle brands",
                "responses": {}
            }
        },
        "/vehicles/brands/{id}": {
            "get": {
                "description": "Get details of a specific vehicle brand",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brands"
                ],
                "summary": "Get vehicle brand details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Brand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.VehicleBrandResponse"
                        }
                    }
                }
            }
        },
        "/vehicles/brands/{id}/models": {
            "get": {
                "description": "Get a list of vehicle models for a specific vehicle brand",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Models"
                ],
                "summary": "List vehicle models by brand",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Brand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListVehicleModelsResponse"
                        }
                    }
                }
            }
        },
        "/vehicles/generations": {
            "get": {
                "description": "Get a list of all available vehicle generations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Generations"
                ],
                "summary": "List all vehicle generations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListVehicleGenerationsResponse"
                        }
                    }
                }
            }
        },
        "/vehicles/generations/{id}": {
            "get": {
                "description": "Get details of a specific vehicle generation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Generations"
                ],
                "summary": "Get vehicle generation details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Generation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.VehicleGenerationResponse"
                        }
                    }
                }
            }
        },
        "/vehicles/models": {
            "get": {
                "description": "Get a list of all available vehicle models",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Models"
                ],
                "summary": "List all vehicle models",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListVehicleModelsResponse"
                        }
                    }
                }
            }
        },
        "/vehicles/models/{id}": {
            "get": {
                "description": "Get details of a specific vehicle model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Models"
                ],
                "summary": "Get vehicle model details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Model ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.VehicleModelResponse"
                        }
                    }
                }
            }
        },
        "/vehicles/models/{id}/generations": {
            "get": {
                "description": "Get a list of vehicle generations for a specific vehicle model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Generations"
                ],
                "summary": "List vehicle generations by model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Model ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListVehicleGenerationsResponse"
                        }
                    }
                }
            }
        },
        "/vehicles/types": {
            "get": {
                "description": "Get a list of all available vehicle types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Types"
                ],
                "summary": "List all vehicle types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListVehicleTypesResponse"
                        }
                    }
                }
            }
        },
        "/vehicles/types/{id}": {
            "get": {
                "description": "Get details of a specific vehicle type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Types"
                ],
                "summary": "Get vehicle type details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Type ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.VehicleTypeResponse"
                        }
                    }
                }
            }
        },
        "/vehicles/types/{id}/brands": {
            "get": {
                "description": "Get a list of vehicle brands for a specific vehicle type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brands"
                ],
                "summary": "List vehicle brands by type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Type ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListVehicleBrandsResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ChangeUserPasswordRequest": {
            "description": "Request to change user password",
            "type": "object",
            "properties": {
                "new_password": {
                    "description": "New password for the user (minimum 8 characters)",
                    "type": "string",
                    "minLength": 8,
                    "example": "NewPassword123"
                }
            }
        },
        "dto.ChangeUserRoleRequest": {
            "description": "Request to change user role",
            "type": "object",
            "properties": {
                "role": {
                    "description": "New role for the user (User, Admin, SuperAdmin)",
                    "type": "string",
                    "enum": [
                        "User",
                        "Admin",
                        "SuperAdmin"
                    ],
                    "example": "Admin"
                }
            }
        },
        "dto.ChangeUserStatusRequest": {
            "description": "Request to change user status",
            "type": "object",
            "properties": {
                "status": {
                    "description": "New status for the user (Active, Deactivated, Deleted)",
                    "type": "string",
                    "enum": [
                        "Active",
                        "Deactivated",
                        "Deleted"
                    ],
                    "example": "Active"
                }
            }
        },
        "dto.CreateUserVehicleRequest": {
            "description": "User vehicle creation request",
            "type": "object",
            "required": [
                "current_mileage",
                "generation_id",
                "name",
                "purchase_date"
            ],
            "properties": {
                "color": {
                    "description": "Color of the user vehicle",
                    "type": "string",
                    "example": "Red"
                },
                "current_mileage": {
                    "description": "Current mileage of the user vehicle",
                    "type": "integer",
                    "example": 15000
                },
                "generation_id": {
                    "description": "ID of the vehicle generation",
                    "type": "integer",
                    "example": 1
                },
                "license_plate": {
                    "description": "License plate of the user vehicle",
                    "type": "string",
                    "example": "ABC123"
                },
                "name": {
                    "description": "Name of the user vehicle",
                    "type": "string",
                    "example": "My Car"
                },
                "production_year": {
                    "description": "Production year of the user vehicle",
                    "type": "integer",
                    "example": 2020
                },
                "purchase_date": {
                    "description": "Purchase date of the user vehicle",
                    "type": "string",
                    "example": "2020-01-01"
                },
                "vin": {
                    "description": "VIN of the user vehicle",
                    "type": "string",
                    "example": "1HGCM82633A123456"
                }
            }
        },
        "dto.CreateVehicleBrandRequest": {
            "description": "Vehicle brand creation request",
            "type": "object",
            "required": [
                "name",
                "vehicle_type_id"
            ],
            "properties": {
                "description": {
                    "description": "Description of the vehicle brand",
                    "type": "string",
                    "example": "A popular Japanese car brand"
                },
                "name": {
                    "description": "Name of the vehicle brand",
                    "type": "string",
                    "example": "Toyota"
                },
                "vehicle_type_id": {
                    "description": "ID of the vehicle type",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.CreateVehicleGenerationRequest": {
            "description": "Vehicle generation creation request",
            "type": "object",
            "required": [
                "model_id",
                "name"
            ],
            "properties": {
                "assembler": {
                    "description": "Assembler of the vehicle generation",
                    "type": "string",
                    "example": "Toyota"
                },
                "assembly_type": {
                    "description": "Assembly type of the vehicle generation",
                    "type": "string",
                    "example": "CKD"
                },
                "body_style": {
                    "description": "Body style of the vehicle generation",
                    "type": "string",
                    "example": "Sedan"
                },
                "description": {
                    "description": "Description of the vehicle generation",
                    "type": "string",
                    "example": "A brief description of the generation"
                },
                "end_year": {
                    "description": "End year of the vehicle generation",
                    "type": "integer",
                    "example": 2022
                },
                "engine_size": {
                    "description": "Engine size of the vehicle generation",
                    "type": "integer",
                    "example": 3000
                },
                "engine_type": {
                    "description": "Engine type of the vehicle generation",
                    "type": "string",
                    "example": "V6"
                },
                "model_id": {
                    "description": "ID of the vehicle model",
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "description": "Name of the vehicle generation",
                    "type": "string",
                    "example": "Generation Name"
                },
                "special_features": {
                    "description": "Special features of the vehicle generation",
                    "type": "string",
                    "example": "Leather seats, Sunroof"
                },
                "start_year": {
                    "description": "Start year of the vehicle generation",
                    "type": "integer",
                    "example": 2020
                },
                "transmission": {
                    "description": "Transmission of the vehicle generation",
                    "type": "string",
                    "example": "Automatic"
                }
            }
        },
        "dto.CreateVehicleModelRequest": {
            "description": "Vehicle model creation request",
            "type": "object",
            "required": [
                "brand_id",
                "name"
            ],
            "properties": {
                "brand_id": {
                    "description": "ID of the vehicle brand",
                    "type": "integer",
                    "example": 1
                },
                "description": {
                    "description": "Description of the vehicle model",
                    "type": "string",
                    "example": "A mid-size sedan"
                },
                "end_year": {
                    "description": "End year of the vehicle model",
                    "type": "integer",
                    "example": 2022
                },
                "name": {
                    "description": "Name of the vehicle model",
                    "type": "string",
                    "example": "Camry"
                },
                "start_year": {
                    "description": "Start year of the vehicle model",
                    "type": "integer",
                    "example": 2020
                }
            }
        },
        "dto.CreateVehicleTypeRequest": {
            "description": "Vehicle type creation request",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Description of the vehicle type",
                    "type": "string",
                    "example": "A standard passenger car"
                },
                "name": {
                    "description": "Name of the vehicle type",
                    "type": "string",
                    "example": "car"
                }
            }
        },
        "dto.GetProfileResponse": {
            "description": "User profile information response",
            "type": "object",
            "properties": {
                "birthday": {
                    "description": "User's birthday (optional)",
                    "type": "string",
                    "example": "1990-01-01"
                },
                "email": {
                    "description": "User's email address (optional)",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "description": "User's first name (optional)",
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "description": "User's ID",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "last_name": {
                    "description": "User's last name (optional)",
                    "type": "string",
                    "example": "Doe"
                }
            }
        },
        "dto.GetSessionsResponse": {
            "description": "Response containing list of user sessions",
            "type": "object",
            "properties": {
                "sessions": {
                    "description": "List of user sessions",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SessionResponse"
                    }
                }
            }
        },
        "dto.ListUserVehiclesResponse": {
            "description": "List of user vehicles",
            "type": "object",
            "properties": {
                "vehicles": {
                    "description": "List of user vehicles",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserVehicleResponse"
                    }
                }
            }
        },
        "dto.ListUsersResponse": {
            "description": "Response containing list of users",
            "type": "object",
            "properties": {
                "users": {
                    "description": "List of users",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.User"
                    }
                }
            }
        },
        "dto.ListVehicleBrandsResponse": {
            "description": "List of vehicle brands",
            "type": "object",
            "properties": {
                "brands": {
                    "description": "List of vehicle brands",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.VehicleBrandResponse"
                    }
                }
            }
        },
        "dto.ListVehicleGenerationsResponse": {
            "description": "List of vehicle generations",
            "type": "object",
            "properties": {
                "generations": {
                    "description": "List of vehicle generations",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.VehicleGenerationResponse"
                    }
                }
            }
        },
        "dto.ListVehicleModelsResponse": {
            "description": "List of vehicle models",
            "type": "object",
            "properties": {
                "models": {
                    "description": "List of vehicle models",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.VehicleModelResponse"
                    }
                }
            }
        },
        "dto.ListVehicleTypesResponse": {
            "description": "List of vehicle types",
            "type": "object",
            "properties": {
                "types": {
                    "description": "List of vehicle types",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.VehicleTypeResponse"
                    }
                }
            }
        },
        "dto.LoginRequest": {
            "description": "User login request",
            "type": "object",
            "required": [
                "password",
                "phone_number"
            ],
            "properties": {
                "password": {
                    "description": "Password must be at least 8 characters long and include uppercase, lowercase, and numbers",
                    "type": "string",
                    "minLength": 8,
                    "example": "Password123"
                },
                "phone_number": {
                    "description": "Iranian phone number in format 09XXXXXXXXX",
                    "type": "string",
                    "example": "09123456789"
                }
            }
        },
        "dto.LogoutRequest": {
            "description": "User logout request",
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "description": "JWT refresh token",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "dto.RefreshTokenRequest": {
            "description": "Token refresh request",
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "description": "JWT refresh token",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "dto.RegisterRequest": {
            "description": "User registration request",
            "type": "object",
            "required": [
                "password",
                "phone_number"
            ],
            "properties": {
                "password": {
                    "description": "Password must be at least 8 characters long and include uppercase, lowercase, and numbers",
                    "type": "string",
                    "minLength": 8,
                    "example": "Password123"
                },
                "phone_number": {
                    "description": "Iranian phone number in format 09XXXXXXXXX",
                    "type": "string",
                    "example": "09123456789"
                }
            }
        },
        "dto.SessionResponse": {
            "description": "User session information",
            "type": "object",
            "properties": {
                "device_id": {
                    "description": "Device ID",
                    "type": "string",
                    "example": "dev_1234567890"
                },
                "is_active": {
                    "description": "Is active",
                    "type": "boolean",
                    "example": true
                },
                "last_used": {
                    "description": "Last used time",
                    "type": "string",
                    "example": "2024-03-15T14:30:00Z"
                }
            }
        },
        "dto.TokenResponse": {
            "description": "User login response containing access and refresh tokens",
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "JWT access token",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "refresh_token": {
                    "description": "JWT refresh token",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "dto.UpdatePasswordRequest": {
            "description": "User password update request",
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password"
                }
            }
        },
        "dto.UpdateProfileRequest": {
            "description": "User profile update request",
            "type": "object",
            "properties": {
                "birthday": {
                    "description": "User's birthday (optional)",
                    "type": "string",
                    "example": "1990-01-01"
                },
                "email": {
                    "description": "User's email address (optional)",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "description": "User's first name (optional)",
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "description": "User's last name (optional)",
                    "type": "string",
                    "example": "Doe"
                }
            }
        },
        "dto.UpdateUserRequest": {
            "description": "Request to update user details",
            "type": "object",
            "properties": {
                "birthday": {
                    "description": "User's birthday in YYYY-MM-DD format",
                    "type": "string",
                    "example": "1990-01-01"
                },
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "description": "User's first name",
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "description": "User's last name",
                    "type": "string",
                    "example": "Doe"
                },
                "phone": {
                    "description": "User's phone number",
                    "type": "string",
                    "example": "09123456789"
                }
            }
        },
        "dto.UpdateUserVehicleRequest": {
            "description": "User vehicle update request",
            "type": "object",
            "properties": {
                "color": {
                    "description": "Color of the user vehicle",
                    "type": "string",
                    "example": "Red"
                },
                "current_mileage": {
                    "description": "Current mileage of the user vehicle",
                    "type": "integer",
                    "example": 15000
                },
                "generation_id": {
                    "description": "ID of the vehicle generation",
                    "type": "integer",
                    "example": 1
                },
                "license_plate": {
                    "description": "License plate of the user vehicle",
                    "type": "string",
                    "example": "ABC123"
                },
                "name": {
                    "description": "Name of the user vehicle",
                    "type": "string",
                    "example": "My Car"
                },
                "production_year": {
                    "description": "Production year of the user vehicle",
                    "type": "integer",
                    "example": 2020
                },
                "purchase_date": {
                    "description": "Purchase date of the user vehicle",
                    "type": "string",
                    "example": "2020-01-01"
                },
                "vin": {
                    "description": "VIN of the user vehicle",
                    "type": "string",
                    "example": "1HGCM82633A123456"
                }
            }
        },
        "dto.UpdateVehicleBrandRequest": {
            "description": "Vehicle brand update request",
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the vehicle brand",
                    "type": "string",
                    "example": "A popular Japanese car brand"
                },
                "name": {
                    "description": "Name of the vehicle brand",
                    "type": "string",
                    "example": "Toyota"
                },
                "vehicle_type_id": {
                    "description": "ID of the vehicle type",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.UpdateVehicleModelRequest": {
            "description": "Vehicle model update request",
            "type": "object",
            "properties": {
                "brand_id": {
                    "description": "ID of the vehicle brand",
                    "type": "integer",
                    "example": 1
                },
                "description": {
                    "description": "Description of the vehicle model",
                    "type": "string",
                    "example": "A mid-size sedan"
                },
                "end_year": {
                    "description": "End year of the vehicle model",
                    "type": "integer",
                    "example": 2022
                },
                "name": {
                    "description": "Name of the vehicle model",
                    "type": "string",
                    "example": "Camry"
                },
                "start_year": {
                    "description": "Start year of the vehicle model",
                    "type": "integer",
                    "example": 2020
                }
            }
        },
        "dto.UpdateVehicleTypeRequest": {
            "description": "Vehicle type update request",
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the vehicle type",
                    "type": "string",
                    "example": "A standard passenger car"
                },
                "name": {
                    "description": "Name of the vehicle type",
                    "type": "string",
                    "example": "sedan"
                }
            }
        },
        "dto.User": {
            "description": "User information model",
            "type": "object",
            "properties": {
                "birthday": {
                    "description": "User's birthday in YYYY-MM-DD format",
                    "type": "string",
                    "example": "1990-01-01"
                },
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "description": "User's first name",
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "description": "Unique identifier of the user",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "last_name": {
                    "description": "User's last name",
                    "type": "string",
                    "example": "Doe"
                },
                "phone": {
                    "description": "User's phone number",
                    "type": "string",
                    "example": "09123456789"
                },
                "role": {
                    "description": "User's role (User, Admin, SuperAdmin)",
                    "type": "string",
                    "example": "Admin"
                },
                "status": {
                    "description": "User's status (Active, Deactivated, Deleted)",
                    "type": "string",
                    "example": "Active"
                }
            }
        },
        "dto.UserVehicleResponse": {
            "description": "User vehicle response",
            "type": "object",
            "properties": {
                "color": {
                    "description": "Color of the user vehicle",
                    "type": "string"
                },
                "current_mileage": {
                    "description": "Current mileage of the user vehicle",
                    "type": "integer"
                },
                "generation": {
                    "description": "Vehicle generation",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.VehicleGenerationResponse"
                        }
                    ]
                },
                "generation_id": {
                    "description": "ID of the vehicle generation",
                    "type": "integer"
                },
                "id": {
                    "description": "ID of the user vehicle",
                    "type": "integer"
                },
                "license_plate": {
                    "description": "License plate of the user vehicle",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the user vehicle",
                    "type": "string"
                },
                "production_year": {
                    "description": "Production year of the user vehicle",
                    "type": "integer"
                },
                "purchase_date": {
                    "description": "Purchase date of the user vehicle",
                    "type": "string"
                },
                "user_id": {
                    "description": "ID of the user",
                    "type": "string"
                },
                "vin": {
                    "description": "VIN of the user vehicle",
                    "type": "string"
                }
            }
        },
        "dto.VehicleBrandResponse": {
            "description": "Vehicle brand response",
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the vehicle brand",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the vehicle brand",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the vehicle brand",
                    "type": "string"
                },
                "type": {
                    "description": "Vehicle type",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.VehicleTypeResponse"
                        }
                    ]
                },
                "vehicle_type_id": {
                    "description": "ID of the vehicle type",
                    "type": "integer"
                }
            }
        },
        "dto.VehicleGenerationResponse": {
            "description": "Vehicle generation response",
            "type": "object",
            "properties": {
                "assembler": {
                    "description": "Assembler of the vehicle generation",
                    "type": "string"
                },
                "assembly_type": {
                    "description": "Assembly type of the vehicle generation",
                    "type": "string"
                },
                "body_style": {
                    "description": "Body style of the vehicle generation",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the vehicle generation",
                    "type": "string"
                },
                "end_year": {
                    "description": "End year of the vehicle generation",
                    "type": "integer"
                },
                "engine_size": {
                    "description": "Engine size of the vehicle generation",
                    "type": "integer"
                },
                "engine_type": {
                    "description": "Engine type of the vehicle generation",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the vehicle generation",
                    "type": "integer"
                },
                "model_id": {
                    "description": "ID of the vehicle model",
                    "type": "integer"
                },
                "model_info": {
                    "description": "Vehicle model",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.VehicleModelResponse"
                        }
                    ]
                },
                "name": {
                    "description": "Name of the vehicle generation",
                    "type": "string"
                },
                "special_features": {
                    "description": "Special features of the vehicle generation",
                    "type": "string"
                },
                "start_year": {
                    "description": "Start year of the vehicle generation",
                    "type": "integer"
                },
                "transmission": {
                    "description": "Transmission of the vehicle generation",
                    "type": "string"
                }
            }
        },
        "dto.VehicleModelResponse": {
            "description": "Vehicle model response",
            "type": "object",
            "properties": {
                "brand": {
                    "description": "Vehicle brand",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.VehicleBrandResponse"
                        }
                    ]
                },
                "brand_id": {
                    "description": "ID of the vehicle brand",
                    "type": "integer"
                },
                "description": {
                    "description": "Description of the vehicle model",
                    "type": "string"
                },
                "end_year": {
                    "description": "End year of the vehicle model",
                    "type": "integer"
                },
                "id": {
                    "description": "ID of the vehicle model",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the vehicle model",
                    "type": "string"
                },
                "start_year": {
                    "description": "Start year of the vehicle model",
                    "type": "integer"
                }
            }
        },
        "dto.VehicleTypeResponse": {
            "description": "Vehicle type response",
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the vehicle type",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the vehicle type",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the vehicle type",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Authentication operations",
            "name": "Authentication"
        },
        {
            "description": "User management operations",
            "name": "Users"
        },
        {
            "description": "User vehicle management",
            "name": "User - Vehicles"
        },
        {
            "description": "Vehicle types management",
            "name": "Types"
        },
        {
            "description": "Vehicle brands management",
            "name": "Brands"
        },
        {
            "description": "Vehicle models management",
            "name": "Models"
        },
        {
            "description": "Vehicle generations management",
            "name": "Generations"
        },
        {
            "description": "Admin user management operations",
            "name": "Admin - Users"
        },
        {
            "description": "Admin vehicle type management operations",
            "name": "Admin - Types"
        },
        {
            "description": "Admin vehicle brand management operations",
            "name": "Admin - Brands"
        },
        {
            "description": "Admin vehicle model management operations",
            "name": "Admin - Models"
        },
        {
            "description": "Admin vehicle generation management operations",
            "name": "Admin - Generations"
        },
        {
            "description": "Admin user vehicle management operations",
            "name": "Admin - UserVehicles"
        }
    ]
}