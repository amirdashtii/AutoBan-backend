basePath: /api/v1
definitions:
  dto.ChangeUserPasswordRequest:
    description: Request to change user password
    properties:
      new_password:
        description: New password for the user (minimum 8 characters)
        example: NewPassword123
        minLength: 8
        type: string
    type: object
  dto.ChangeUserRoleRequest:
    description: Request to change user role
    properties:
      role:
        description: New role for the user (User, Admin, SuperAdmin)
        enum:
        - User
        - Admin
        - SuperAdmin
        example: Admin
        type: string
    type: object
  dto.ChangeUserStatusRequest:
    description: Request to change user status
    properties:
      status:
        description: New status for the user (Active, Deactivated, Deleted)
        enum:
        - Active
        - Deactivated
        - Deleted
        example: Active
        type: string
    type: object
  dto.CompleteVehicleHierarchyResponse:
    description: Complete vehicle hierarchy with all types, brands, models, and generations
    properties:
      total_brands:
        description: Total count of vehicle brands
        type: integer
      total_generations:
        description: Total count of vehicle generations
        type: integer
      total_models:
        description: Total count of vehicle models
        type: integer
      total_types:
        description: Total count of vehicle types
        type: integer
      vehicle_types:
        description: List of all vehicle types with their complete hierarchy
        items:
          $ref: '#/definitions/dto.VehicleTypeTreeResponse'
        type: array
    type: object
  dto.CreateServiceVisitRequest:
    description: Service visit creation request
    properties:
      notes:
        description: Additional notes
        example: Regular maintenance service
        type: string
      oil_change:
        allOf:
        - $ref: '#/definitions/dto.ServiceVisitOilChange'
        description: Oil change information (optional)
      oil_filter:
        allOf:
        - $ref: '#/definitions/dto.ServiceVisitOilFilter'
        description: Oil filter information (optional)
      service_center:
        description: Service center where service was performed
        example: Auto Service Center
        type: string
      service_date:
        description: Date when service was performed
        example: "2024-01-15"
        type: string
      service_mileage:
        description: Mileage when service was performed
        example: 15000
        minimum: 0
        type: integer
      user_vehicle_id:
        description: ID of the user vehicle
        example: 1
        type: integer
    required:
    - service_date
    - service_mileage
    - user_vehicle_id
    type: object
  dto.CreateUserVehicleRequest:
    description: User vehicle creation request
    properties:
      color:
        description: Color of the user vehicle
        example: Red
        type: string
      current_mileage:
        description: Current mileage of the user vehicle
        example: 15000
        minimum: 0
        type: integer
      generation_id:
        description: ID of the vehicle generation
        example: 1
        type: integer
      license_plate:
        description: License plate of the user vehicle
        example: ۱۲الف۳۴۵۶۸
        type: string
      name:
        description: Name of the user vehicle
        example: My Car
        type: string
      production_year:
        description: Production year of the user vehicle
        example: 2020
        type: integer
      purchase_date:
        description: Purchase date of the user vehicle
        example: "2020-01-01"
        type: string
      vin:
        description: VIN of the user vehicle
        example: 1HGCM82633A123456
        type: string
    required:
    - generation_id
    - name
    type: object
  dto.CreateVehicleBrandRequest:
    description: Vehicle brand creation request
    properties:
      description_en:
        description: Description of the vehicle brand
        example: A popular Japanese car brand
        type: string
      description_fa:
        description: Description of the vehicle brand
        example: برند خودرویی از کشور ژاپن
        type: string
      name_en:
        description: Name of the vehicle brand
        example: Toyota
        type: string
      name_fa:
        description: Name of the vehicle brand
        example: تویوتا
        type: string
    required:
    - name_en
    - name_fa
    type: object
  dto.CreateVehicleGenerationRequest:
    description: Vehicle generation creation request
    properties:
      assembler:
        description: Assembler of the vehicle generation
        example: Toyota
        type: string
      assembly_type:
        description: Assembly type of the vehicle generation
        example: CKD
        type: string
      battery:
        description: Battery of the vehicle generation
        example: Li-ion
        type: string
      body_style_en:
        example: Sedan
        type: string
      body_style_fa:
        description: Body style of the vehicle generation
        example: سدان
        type: string
      cylinders:
        description: Cylinders of the vehicle generation
        example: 4
        type: integer
      description_en:
        description: Description of the vehicle generation
        example: A brief description of the generation
        type: string
      description_fa:
        description: Description of the vehicle generation
        example: A brief description of the generation
        type: string
      drivetrain_en:
        example: 4WD
        type: string
      drivetrain_fa:
        description: Drivetrain of the vehicle generation
        example: دودیفرانسیل
        type: string
      end_year:
        description: End year of the vehicle generation
        example: 2022
        type: integer
      engine:
        description: Engine of the vehicle generation
        example: 1.6 TDI
        type: string
      engine_volume:
        description: Engine volume of the vehicle generation
        example: 1600
        type: integer
      fuel_type:
        description: Fuel type of the vehicle generation
        example: Gasoline
        type: string
      gearbox:
        description: Gearbox of the vehicle generation
        example: Automatic
        type: string
      name_en:
        description: Name of the vehicle generation
        example: Generation Name
        type: string
      name_fa:
        description: Name of the vehicle generation
        example: Generation Name
        type: string
      seller:
        description: Seller of the vehicle generation
        example: Toyota
        type: string
      start_year:
        description: Start year of the vehicle generation
        example: 2020
        type: integer
    required:
    - name_en
    - name_fa
    type: object
  dto.CreateVehicleModelRequest:
    description: Vehicle model creation request
    properties:
      description_en:
        description: Description of the vehicle model
        example: A mid-size sedan
        type: string
      description_fa:
        description: Description of the vehicle model
        example: A mid-size sedan
        type: string
      name_en:
        description: Name of the vehicle model
        example: Camry
        type: string
      name_fa:
        description: Name of the vehicle model
        example: Camry
        type: string
    required:
    - name_en
    - name_fa
    type: object
  dto.CreateVehicleTypeRequest:
    description: Vehicle type creation request
    properties:
      description_en:
        description: Description of the vehicle type in English
        example: A standard passenger car
        type: string
      description_fa:
        description: Description of the vehicle type in Persian
        example: خودروی سواری استاندارد
        type: string
      name_en:
        description: Name of the vehicle type in English
        example: Car
        type: string
      name_fa:
        description: Name of the vehicle type in Persian
        example: خودرو
        type: string
    required:
    - name_en
    - name_fa
    type: object
  dto.GetProfileResponse:
    description: User profile information response
    properties:
      birthday:
        description: User's birthday (optional)
        example: "1990-01-01"
        type: string
      email:
        description: User's email address (optional)
        example: john.doe@example.com
        type: string
      first_name:
        description: User's first name (optional)
        example: John
        type: string
      id:
        description: User's ID
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      last_name:
        description: User's last name (optional)
        example: Doe
        type: string
    type: object
  dto.GetSessionsResponse:
    description: Response containing list of user sessions
    properties:
      sessions:
        description: List of user sessions
        items:
          $ref: '#/definitions/dto.SessionResponse'
        type: array
    type: object
  dto.ListOilChangesResponse:
    description: Oil change list response
    properties:
      oil_changes:
        description: Oil changes
        items:
          $ref: '#/definitions/dto.OilChangeResponse'
        type: array
    type: object
  dto.ListOilFiltersResponse:
    description: List of oil filter changes
    properties:
      oil_filters:
        description: List of oil filter changes
        items:
          $ref: '#/definitions/dto.OilFilterResponse'
        type: array
    type: object
  dto.ListServiceVisitsResponse:
    description: List of service visits
    properties:
      service_visits:
        description: List of service visits
        items:
          $ref: '#/definitions/dto.ServiceVisitResponse'
        type: array
    type: object
  dto.ListUserVehiclesResponse:
    description: List of user vehicles
    properties:
      vehicles:
        description: List of user vehicles
        items:
          $ref: '#/definitions/dto.UserVehicleResponse'
        type: array
    type: object
  dto.ListUsersResponse:
    description: Response containing list of users
    properties:
      users:
        description: List of users
        items:
          $ref: '#/definitions/dto.User'
        type: array
    type: object
  dto.ListVehicleBrandsResponse:
    description: List of vehicle brands
    properties:
      brands:
        description: List of vehicle brands
        items:
          $ref: '#/definitions/dto.VehicleBrandResponse'
        type: array
    type: object
  dto.ListVehicleGenerationsResponse:
    description: List of vehicle generations
    properties:
      generations:
        description: List of vehicle generations
        items:
          $ref: '#/definitions/dto.VehicleGenerationResponse'
        type: array
    type: object
  dto.ListVehicleModelsResponse:
    description: List of vehicle models
    properties:
      models:
        description: List of vehicle models
        items:
          $ref: '#/definitions/dto.VehicleModelResponse'
        type: array
    type: object
  dto.ListVehicleTypesResponse:
    description: List of vehicle types
    properties:
      types:
        description: List of vehicle types
        items:
          $ref: '#/definitions/dto.VehicleTypeResponse'
        type: array
    type: object
  dto.LoginRequest:
    description: User login request
    properties:
      password:
        description: Password must be at least 8 characters long and include uppercase,
          lowercase, and numbers
        example: Password123
        minLength: 8
        type: string
      phone_number:
        description: Iranian phone number in format 09XXXXXXXXX
        example: "09123456789"
        type: string
    required:
    - password
    - phone_number
    type: object
  dto.LogoutRequest:
    description: User logout request
    properties:
      refresh_token:
        description: JWT refresh token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  dto.OilChangeResponse:
    description: Oil change response
    properties:
      change_date:
        description: Change date
        example: "2021-01-01"
        type: string
      change_mileage:
        description: Change mileage
        example: 10000
        type: integer
      id:
        description: ID
        example: 1
        type: integer
      next_change_date:
        description: Next change date
        example: "2021-01-01"
        type: string
      next_change_mileage:
        description: Next change mileage
        example: 20000
        type: integer
      notes:
        description: Notes
        example: تعویض روغن
        type: string
      oil_brand:
        description: Oil brand
        example: بهران
        type: string
      oil_capacity:
        description: Oil capacity
        example: 5
        type: number
      oil_name:
        description: Oil name
        example: تکتاز
        type: string
      oil_type:
        description: Oil type
        example: مینرال، سنتتیک، نیمه سنتتیک
        type: string
      oil_viscosity:
        description: Oil viscosity
        example: 5W-30, 10W-40, etc.
        type: string
      service_center:
        description: Service center
        example: اتوبان سرویس
        type: string
      user_vehicle_id:
        description: User vehicle ID
        example: 1
        type: integer
    type: object
  dto.OilFilterResponse:
    description: Oil filter change response
    properties:
      change_date:
        description: Date when filter was changed
        type: string
      change_mileage:
        description: Mileage when filter was changed
        type: integer
      filter_brand:
        description: Brand of the oil filter
        type: string
      filter_name:
        description: Name of the oil filter
        type: string
      filter_part_number:
        description: Part number of the oil filter
        type: string
      filter_type:
        description: Type of the oil filter
        type: string
      id:
        description: ID of the oil filter change
        type: integer
      next_change_date:
        description: Next change date
        type: string
      next_change_mileage:
        description: Next change mileage
        type: integer
      notes:
        description: Additional notes
        type: string
      service_center:
        description: Service center where filter was changed
        type: string
      user_vehicle_id:
        description: ID of the user vehicle
        type: integer
    type: object
  dto.RefreshTokenRequest:
    description: Token refresh request
    properties:
      refresh_token:
        description: JWT refresh token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  dto.RegisterRequest:
    description: User registration request
    properties:
      password:
        description: Password must be at least 8 characters long and include uppercase,
          lowercase, and numbers
        example: Password123
        minLength: 8
        type: string
      phone_number:
        description: Iranian phone number in format 09XXXXXXXXX
        example: "09123456789"
        type: string
    required:
    - password
    - phone_number
    type: object
  dto.ServiceVisitOilChange:
    description: add oil change to create service visit
    properties:
      next_change_date:
        description: Next change date
        example: "2021-01-01"
        type: string
      next_change_mileage:
        description: Next change mileage
        example: 20000
        minimum: 0
        type: integer
      notes:
        description: Notes
        example: تعویض روغن
        type: string
      oil_brand:
        description: Oil brand
        example: بهران
        type: string
      oil_capacity:
        description: Oil capacity
        example: 5
        type: number
      oil_name:
        description: Oil name
        example: تکتاز
        type: string
      oil_type:
        description: Oil type
        example: مینرال، سنتتیک، نیمه سنتتیک
        type: string
      oil_viscosity:
        description: Oil viscosity
        example: 5W-30, 10W-40, etc.
        type: string
    required:
    - oil_name
    type: object
  dto.ServiceVisitOilChangeResponse:
    description: Oil change response
    properties:
      id:
        description: ID
        example: 1
        type: integer
      next_change_date:
        description: Next change date
        example: "2021-01-01"
        type: string
      next_change_mileage:
        description: Next change mileage
        example: 20000
        type: integer
      notes:
        description: Notes
        example: تعویض روغن
        type: string
      oil_brand:
        description: Oil brand
        example: بهران
        type: string
      oil_capacity:
        description: Oil capacity
        example: 5
        type: number
      oil_name:
        description: Oil name
        example: تکتاز
        type: string
      oil_type:
        description: Oil type
        example: مینرال، سنتتیک، نیمه سنتتیک
        type: string
      oil_viscosity:
        description: Oil viscosity
        example: 5W-30, 10W-40, etc.
        type: string
    type: object
  dto.ServiceVisitOilFilter:
    description: Requst to add oil filter to create service visit
    properties:
      filter_brand:
        description: Brand of the oil filter
        example: Mann
        type: string
      filter_name:
        description: Name of the oil filter
        example: Oil Filter
        type: string
      filter_part_number:
        description: Part number of the oil filter
        example: HU816x
        type: string
      filter_type:
        description: Type of the oil filter
        example: Cartridge
        type: string
      next_change_date:
        description: Next change date
        example: "2024-07-15"
        type: string
      next_change_mileage:
        description: Next change mileage
        example: 30000
        minimum: 0
        type: integer
      notes:
        description: Additional notes
        example: Changed with oil change
        type: string
    required:
    - filter_name
    type: object
  dto.ServiceVisitOilFilterResponse:
    description: Oil filter response
    properties:
      filter_brand:
        description: Brand of the oil filter
        type: string
      filter_name:
        description: Name of the oil filter
        type: string
      filter_part_number:
        description: Part number of the oil filter
        type: string
      filter_type:
        description: Type of the oil filter
        type: string
      id:
        description: ID
        example: 1
        type: integer
      next_change_date:
        description: Next change date
        type: string
      next_change_mileage:
        description: Next change mileage
        type: integer
      notes:
        description: Additional notes
        type: string
    type: object
  dto.ServiceVisitResponse:
    description: Service visit response
    properties:
      id:
        description: ID of the service visit
        type: string
      notes:
        description: Additional notes
        type: string
      oil_change:
        allOf:
        - $ref: '#/definitions/dto.ServiceVisitOilChangeResponse'
        description: Oil change information (if performed)
      oil_filter:
        allOf:
        - $ref: '#/definitions/dto.ServiceVisitOilFilterResponse'
        description: Oil filter information (if performed)
      service_center:
        description: Service center where service was performed
        type: string
      service_date:
        description: Date when service was performed
        type: string
      service_mileage:
        description: Mileage when service was performed
        type: integer
      user_vehicle_id:
        description: ID of the user vehicle
        type: integer
    type: object
  dto.SessionResponse:
    description: User session information
    properties:
      device_id:
        description: Device ID
        example: dev_1234567890
        type: string
      is_active:
        description: Is active
        example: true
        type: boolean
      last_used:
        description: Last used time
        example: "2024-03-15T14:30:00Z"
        type: string
    type: object
  dto.TokenResponse:
    description: User login response containing access and refresh tokens
    properties:
      access_token:
        description: JWT access token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        description: JWT refresh token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  dto.UpdatePasswordRequest:
    description: User password update request
    properties:
      password:
        example: password
        type: string
    type: object
  dto.UpdateProfileRequest:
    description: User profile update request
    properties:
      birthday:
        description: User's birthday (optional)
        example: "1990-01-01"
        type: string
      email:
        description: User's email address (optional)
        example: john.doe@example.com
        type: string
      first_name:
        description: User's first name (optional)
        example: John
        type: string
      last_name:
        description: User's last name (optional)
        example: Doe
        type: string
    type: object
  dto.UpdateServiceVisitOilChange:
    description: add oil change to update service visit request
    properties:
      next_change_date:
        description: Next change date
        example: "2021-01-01"
        type: string
      next_change_mileage:
        description: Next change mileage
        example: 20000
        minimum: 0
        type: integer
      notes:
        description: Notes
        example: تعویض روغن
        type: string
      oil_brand:
        description: Oil brand
        example: بهران
        type: string
      oil_capacity:
        description: Oil capacity
        example: 5
        type: number
      oil_name:
        description: Oil name
        example: تکتاز
        type: string
      oil_type:
        description: Oil type
        example: مینرال، سنتتیک، نیمه سنتتیک
        type: string
      oil_viscosity:
        description: Oil viscosity
        example: 5W-30, 10W-40, etc.
        type: string
    type: object
  dto.UpdateServiceVisitOilFilter:
    description: add oil filter to update service visit request
    properties:
      filter_brand:
        description: Brand of the oil filter
        example: Mann
        type: string
      filter_name:
        description: Name of the oil filter
        example: Oil Filter
        type: string
      filter_part_number:
        description: Part number of the oil filter
        example: HU816x
        type: string
      filter_type:
        description: Type of the oil filter
        example: Cartridge
        type: string
      next_change_date:
        description: Next change date
        example: "2024-07-15"
        type: string
      next_change_mileage:
        description: Next change mileage
        example: 30000
        minimum: 0
        type: integer
      notes:
        description: Additional notes
        example: Changed with oil change
        type: string
    type: object
  dto.UpdateServiceVisitRequest:
    description: Service visit update request
    properties:
      notes:
        description: Additional notes
        example: Regular maintenance service
        type: string
      oil_change:
        allOf:
        - $ref: '#/definitions/dto.UpdateServiceVisitOilChange'
        description: Oil change information (optional)
      oil_filter:
        allOf:
        - $ref: '#/definitions/dto.UpdateServiceVisitOilFilter'
        description: Oil filter information (optional)
      service_center:
        description: Service center where service was performed
        example: Auto Service Center
        type: string
      service_date:
        description: Date when service was performed
        example: "2024-01-15"
        type: string
      service_mileage:
        description: Mileage when service was performed
        example: 15000
        minimum: 0
        type: integer
    type: object
  dto.UpdateUserRequest:
    description: Request to update user details
    properties:
      birthday:
        description: User's birthday in YYYY-MM-DD format
        example: "1990-01-01"
        type: string
      email:
        description: User's email address
        example: john.doe@example.com
        type: string
      first_name:
        description: User's first name
        example: John
        type: string
      last_name:
        description: User's last name
        example: Doe
        type: string
      phone:
        description: User's phone number
        example: "09123456789"
        type: string
    type: object
  dto.UpdateUserVehicleRequest:
    description: User vehicle update request
    properties:
      color:
        description: Color of the user vehicle
        example: Red
        type: string
      current_mileage:
        description: Current mileage of the user vehicle
        example: 15000
        minimum: 0
        type: integer
      generation_id:
        description: ID of the vehicle generation
        example: 1
        type: integer
      license_plate:
        description: License plate of the user vehicle
        example: ۱۲الف۳۴۵۶۸
        type: string
      name:
        description: Name of the user vehicle
        example: My Car
        type: string
      production_year:
        description: Production year of the user vehicle
        example: 2020
        type: integer
      purchase_date:
        description: Purchase date of the user vehicle
        example: "2020-01-01"
        type: string
      vin:
        description: VIN of the user vehicle
        example: 1HGCM82633A123456
        type: string
    type: object
  dto.UpdateVehicleBrandRequest:
    description: Vehicle brand update request
    properties:
      description_en:
        description: Description of the vehicle brand
        example: A popular Japanese car brand
        type: string
      description_fa:
        description: Description of the vehicle brand
        example: برند خودرویی از کشور ژاپن
        type: string
      name_en:
        description: Name of the vehicle brand
        example: Toyota
        type: string
      name_fa:
        description: Name of the vehicle brand
        example: تویوتا
        type: string
      vehicle_type_id:
        description: ID of the vehicle type
        example: 1
        type: integer
    type: object
  dto.UpdateVehicleModelRequest:
    description: Vehicle model update request
    properties:
      brand_id:
        description: ID of the vehicle brand
        example: 1
        type: integer
      description_en:
        description: Description of the vehicle model
        example: A mid-size sedan
        type: string
      description_fa:
        description: Description of the vehicle model
        example: A mid-size sedan
        type: string
      name_en:
        description: Name of the vehicle model
        example: Camry
        type: string
      name_fa:
        description: Name of the vehicle model
        example: Camry
        type: string
    type: object
  dto.UpdateVehicleTypeRequest:
    description: Vehicle type update request
    properties:
      description_en:
        description: Description of the vehicle type in English
        example: A standard passenger car
        type: string
      description_fa:
        description: Description of the vehicle type in Persian
        example: خودروی سواری استاندارد
        type: string
      name_en:
        description: Name of the vehicle type in English
        example: Car
        type: string
      name_fa:
        description: Name of the vehicle type in Persian
        example: خودرو
        type: string
    type: object
  dto.User:
    description: User information model
    properties:
      birthday:
        description: User's birthday in YYYY-MM-DD format
        example: "1990-01-01"
        type: string
      email:
        description: User's email address
        example: john.doe@example.com
        type: string
      first_name:
        description: User's first name
        example: John
        type: string
      id:
        description: Unique identifier of the user
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      last_name:
        description: User's last name
        example: Doe
        type: string
      phone:
        description: User's phone number
        example: "09123456789"
        type: string
      role:
        description: User's role (User, Admin, SuperAdmin)
        example: Admin
        type: string
      status:
        description: User's status (Active, Deactivated, Deleted)
        example: Active
        type: string
    type: object
  dto.UserVehicleResponse:
    description: User vehicle response
    properties:
      color:
        description: Color of the user vehicle
        type: string
      current_mileage:
        description: Current mileage of the user vehicle
        type: integer
      generation_id:
        description: ID of the vehicle generation
        type: integer
      id:
        description: ID of the user vehicle
        type: integer
      license_plate:
        description: License plate of the user vehicle
        type: string
      name:
        description: Name of the user vehicle
        type: string
      production_year:
        description: Production year of the user vehicle
        type: integer
      purchase_date:
        description: Purchase date of the user vehicle
        type: string
      user_id:
        description: ID of the user
        type: string
      vin:
        description: VIN of the user vehicle
        type: string
    type: object
  dto.VehicleBrandResponse:
    description: Vehicle brand response
    properties:
      description_en:
        description: Description of the vehicle brand
        type: string
      description_fa:
        description: Description of the vehicle brand
        type: string
      id:
        description: ID of the vehicle brand
        type: integer
      name_en:
        description: Name of the vehicle brand
        type: string
      name_fa:
        description: Name of the vehicle brand
        type: string
      vehicle_type_id:
        description: ID of the vehicle type
        type: integer
    type: object
  dto.VehicleBrandTreeResponse:
    description: Vehicle brand in hierarchical tree
    properties:
      id:
        description: ID of the vehicle brand
        type: integer
      models:
        description: List of models for this brand
        items:
          $ref: '#/definitions/dto.VehicleModelTreeResponse'
        type: array
      name_en:
        description: Name of the vehicle brand
        type: string
      name_fa:
        description: Name of the vehicle brand
        type: string
    type: object
  dto.VehicleGenerationResponse:
    description: Vehicle generation response
    properties:
      assembler:
        description: Assembler of the vehicle generation
        type: string
      assembly_type:
        description: Assembly type of the vehicle generation
        type: string
      battery:
        description: Battery of the vehicle generation
        type: string
      body_style_en:
        description: Body style of the vehicle generation
        type: string
      body_style_fa:
        description: Body style of the vehicle generation
        type: string
      cylinders:
        description: Cylinders of the vehicle generation
        type: integer
      description_en:
        description: Description of the vehicle generation
        type: string
      description_fa:
        description: Description of the vehicle generation
        type: string
      drivetrain_en:
        type: string
      drivetrain_fa:
        description: Drivetrain of the vehicle generation
        type: string
      end_year:
        description: End year of the vehicle generation
        type: integer
      engine:
        description: Engine of the vehicle generation
        type: string
      engine_volume:
        description: Engine volume of the vehicle generation
        type: integer
      fuel_type:
        description: Fuel type of the vehicle generation
        type: string
      gearbox:
        description: Gearbox of the vehicle generation
        type: string
      id:
        description: ID of the vehicle generation
        type: integer
      model_id:
        description: ID of the vehicle model
        type: integer
      name_en:
        description: Name of the vehicle generation
        type: string
      name_fa:
        description: Name of the vehicle generation
        type: string
      seller:
        description: Seller of the vehicle generation
        type: string
      start_year:
        description: Start year of the vehicle generation
        type: integer
    type: object
  dto.VehicleGenerationTreeResponse:
    description: Vehicle generation in hierarchical tree
    properties:
      id:
        description: ID of the vehicle generation
        type: integer
      name_en:
        description: Name of the vehicle generation
        type: string
      name_fa:
        description: Name of the vehicle generation
        type: string
    type: object
  dto.VehicleModelResponse:
    description: Vehicle model response
    properties:
      brand_id:
        description: ID of the vehicle brand
        type: integer
      description_en:
        description: Description of the vehicle model
        type: string
      description_fa:
        description: Description of the vehicle model
        type: string
      id:
        description: ID of the vehicle model
        type: integer
      name_en:
        description: Name of the vehicle model
        type: string
      name_fa:
        description: Name of the vehicle model
        type: string
    type: object
  dto.VehicleModelTreeResponse:
    description: Vehicle model in hierarchical tree
    properties:
      generations:
        description: List of generations for this model
        items:
          $ref: '#/definitions/dto.VehicleGenerationTreeResponse'
        type: array
      id:
        description: ID of the vehicle model
        type: integer
      name_en:
        description: Name of the vehicle model
        type: string
      name_fa:
        description: Name of the vehicle model
        type: string
    type: object
  dto.VehicleTypeResponse:
    description: Vehicle type response
    properties:
      description_en:
        description: Description of the vehicle type in English
        type: string
      description_fa:
        description: Description of the vehicle type in Persian
        type: string
      id:
        description: ID of the vehicle type
        type: integer
      name_en:
        description: Name of the vehicle type in English
        type: string
      name_fa:
        description: Name of the vehicle type in Persian
        type: string
    type: object
  dto.VehicleTypeTreeResponse:
    description: Vehicle type in hierarchical tree
    properties:
      brands:
        description: List of brands for this type
        items:
          $ref: '#/definitions/dto.VehicleBrandTreeResponse'
        type: array
      id:
        description: ID of the vehicle type
        type: integer
      name_en:
        description: Name of the vehicle type
        type: string
      name_fa:
        description: Name of the vehicle type
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for AutoBan.
  license:
    name: GNU General Public License v3.0
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  title: AutoBan API
  version: "1.0"
paths:
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users with pagination
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListUsersResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - Admin - Users
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user from the system
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Admin - Users
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user details
      tags:
      - Admin - Users
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Admin - Users
  /admin/users/{id}/change-password:
    post:
      consumes:
      - application/json
      description: Change the password of a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Change user password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangeUserPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User password changed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - Admin - Users
  /admin/users/{id}/role:
    post:
      consumes:
      - application/json
      description: Change the role of a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Change user role request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangeUserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User role changed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change user role
      tags:
      - Admin - Users
  /admin/users/{id}/status:
    post:
      consumes:
      - application/json
      description: Change the status of a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Change user status request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangeUserStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User status changed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change user status
      tags:
      - Admin - Users
  /admin/vehicles/types:
    post:
      consumes:
      - application/json
      description: Create a new vehicle type
      parameters:
      - description: Vehicle Type
        in: body
        name: vehicleType
        required: true
        schema:
          $ref: '#/definitions/dto.CreateVehicleTypeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.VehicleTypeResponse'
      security:
      - BearerAuth: []
      summary: Create a new vehicle type
      tags:
      - Admin - Types
  /admin/vehicles/types/{type_id}:
    delete:
      consumes:
      - application/json
      description: Delete a vehicle type
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete a vehicle type
      tags:
      - Admin - Types
    put:
      consumes:
      - application/json
      description: Update a vehicle type
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      - description: Vehicle Type
        in: body
        name: vehicleType
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateVehicleTypeRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VehicleTypeResponse'
      security:
      - BearerAuth: []
      summary: Update a vehicle type
      tags:
      - Admin - Types
  /admin/vehicles/types/{type_id}/brands:
    post:
      consumes:
      - application/json
      description: Create a new vehicle brand
      parameters:
      - description: Vehicle Brand
        in: body
        name: brand
        required: true
        schema:
          $ref: '#/definitions/dto.CreateVehicleBrandRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.VehicleBrandResponse'
      security:
      - BearerAuth: []
      summary: Create a new vehicle brand
      tags:
      - Admin - Brands
  /admin/vehicles/types/{type_id}/brands/{brand_id}:
    delete:
      consumes:
      - application/json
      description: Delete a vehicle brand
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      - description: Vehicle Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete a vehicle brand
      tags:
      - Admin - Brands
    put:
      consumes:
      - application/json
      description: Update a vehicle brand
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      - description: Vehicle Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      - description: Vehicle Brand
        in: body
        name: brand
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateVehicleBrandRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VehicleBrandResponse'
      security:
      - BearerAuth: []
      summary: Update a vehicle brand
      tags:
      - Admin - Brands
  /admin/vehicles/types/{type_id}/brands/{brand_id}/models:
    post:
      consumes:
      - application/json
      description: Create a new vehicle model
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      - description: Vehicle Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      - description: Vehicle Model
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/dto.CreateVehicleModelRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.VehicleModelResponse'
      security:
      - BearerAuth: []
      summary: Create a new vehicle model
      tags:
      - Admin - Models
  /admin/vehicles/types/{type_id}/brands/{brand_id}/models/{model_id}:
    delete:
      consumes:
      - application/json
      description: Delete a vehicle model
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      - description: Vehicle Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      - description: Vehicle Model ID
        in: path
        name: model_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete a vehicle model
      tags:
      - Admin - Models
    put:
      consumes:
      - application/json
      description: Update a vehicle model
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      - description: Vehicle Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      - description: Vehicle Model ID
        in: path
        name: model_id
        required: true
        type: string
      - description: Vehicle Model
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateVehicleModelRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VehicleModelResponse'
      security:
      - BearerAuth: []
      summary: Update a vehicle model
      tags:
      - Admin - Models
  /admin/vehicles/types/{type_id}/brands/{brand_id}/models/{model_id}/generations:
    post:
      consumes:
      - application/json
      description: Create a new vehicle generation
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      - description: Vehicle Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      - description: Vehicle Model ID
        in: path
        name: model_id
        required: true
        type: string
      - description: Vehicle Generation
        in: body
        name: generation
        required: true
        schema:
          $ref: '#/definitions/dto.CreateVehicleGenerationRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.VehicleGenerationResponse'
      security:
      - BearerAuth: []
      summary: Create a new vehicle generation
      tags:
      - Admin - Generations
  /admin/vehicles/types/{type_id}/brands/{brand_id}/models/{model_id}/generations/{generation_id}:
    delete:
      consumes:
      - application/json
      description: Delete a vehicle generation
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      - description: Vehicle Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      - description: Vehicle Model ID
        in: path
        name: model_id
        required: true
        type: string
      - description: Vehicle Generation ID
        in: path
        name: generation_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete a vehicle generation
      tags:
      - Admin - Generations
    put:
      consumes:
      - application/json
      description: Update a vehicle generation
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      - description: Vehicle Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      - description: Vehicle Model ID
        in: path
        name: model_id
        required: true
        type: string
      - description: Vehicle Generation ID
        in: path
        name: generation_id
        required: true
        type: string
      - description: Vehicle Generation
        in: body
        name: generation
        required: true
        schema:
          $ref: '#/definitions/dto.CreateVehicleGenerationRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VehicleGenerationResponse'
      security:
      - BearerAuth: []
      summary: Update a vehicle generation
      tags:
      - Admin - Generations
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user with phone number and password
      parameters:
      - description: User login details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout a user by invalidating the refresh token
      parameters:
      - description: Refresh token to invalidate
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - Authentication
  /auth/logout-all:
    post:
      consumes:
      - application/json
      description: Logs out the user from all devices by invalidating all refresh
        tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout from all devices
      tags:
      - Authentication
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Get new access and refresh tokens using a valid refresh token
      parameters:
      - description: Current refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with phone number and password
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - Authentication
  /auth/sessions:
    get:
      consumes:
      - application/json
      description: Returns all active sessions for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetSessionsResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user sessions
      tags:
      - Authentication
  /user/vehicles:
    get:
      consumes:
      - application/json
      description: Get a list of all user vehicle
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListUserVehiclesResponse'
      security:
      - BearerAuth: []
      summary: List all user vehicles
      tags:
      - User - Vehicles
    post:
      consumes:
      - application/json
      description: Add new vehicle to user
      parameters:
      - description: UserVehicle Type
        in: body
        name: vehicleType
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserVehicleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserVehicleResponse'
      security:
      - BearerAuth: []
      summary: Add new vehicle to
      tags:
      - User - Vehicles
  /user/vehicles/{vehicle_id}:
    delete:
      consumes:
      - application/json
      description: Delete a user vehicle
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: delete a user vehicle
      tags:
      - User - Vehicles
    get:
      consumes:
      - application/json
      description: Get details of a specific user vehicle
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserVehicleResponse'
      security:
      - BearerAuth: []
      summary: Get user vehicle details
      tags:
      - User - Vehicles
    put:
      consumes:
      - application/json
      description: Update the details of a specific user vehicle
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: string
      - description: User Vehicle
        in: body
        name: userVehicle
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserVehicleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateUserVehicleRequest'
      security:
      - BearerAuth: []
      summary: Update user vehicle details
      tags:
      - User - Vehicles
  /user/vehicles/{vehicle_id}/oil-changes:
    get:
      consumes:
      - application/json
      description: Get a list of all oil changes for a user vehicle
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListOilChangesResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all oil changes
      tags:
      - Oil Changes
  /user/vehicles/{vehicle_id}/oil-changes/{oil_change_id}:
    get:
      consumes:
      - application/json
      description: Get information about a specific oil change
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: integer
      - description: Oil change ID
        in: path
        name: oil_change_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OilChangeResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get oil change information
      tags:
      - Oil Changes
  /user/vehicles/{vehicle_id}/oil-changes/last:
    get:
      description: Get the last oil change for a user vehicle
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OilChangeResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Last oil change
      tags:
      - Oil Changes
  /user/vehicles/{vehicle_id}/oil-filters:
    get:
      consumes:
      - application/json
      description: Get all oil filter change records for a specific user vehicle
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListOilFiltersResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List oil filter changes for a user vehicle
      tags:
      - Oil Filters
  /user/vehicles/{vehicle_id}/oil-filters/{oil_filter_id}:
    get:
      consumes:
      - application/json
      description: Get a specific oil filter change record by its ID
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: string
      - description: Oil filter change ID
        in: path
        name: oil_filter_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OilFilterResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get oil filter change by ID
      tags:
      - Oil Filters
  /user/vehicles/{vehicle_id}/oil-filters/last:
    get:
      consumes:
      - application/json
      description: Get the most recent oil filter change record for a specific user
        vehicle
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OilFilterResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get last oil filter change for a user vehicle
      tags:
      - Oil Filters
  /user/vehicles/{vehicle_id}/service-visits:
    get:
      consumes:
      - application/json
      description: Get all service visit records for a specific user vehicle
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListServiceVisitsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List service visits for a user vehicle
      tags:
      - Service Visits
    post:
      consumes:
      - application/json
      description: Create a new service visit record for a user vehicle with optional
        services
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: string
      - description: Service visit data
        in: body
        name: service_visit
        required: true
        schema:
          $ref: '#/definitions/dto.CreateServiceVisitRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ServiceVisitResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new service visit
      tags:
      - Service Visits
  /user/vehicles/{vehicle_id}/service-visits/{visit_id}:
    delete:
      consumes:
      - application/json
      description: Delete a service visit record
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: string
      - description: Service visit ID
        in: path
        name: visit_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete service visit
      tags:
      - Service Visits
    get:
      consumes:
      - application/json
      description: Get a specific service visit record by its ID
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: string
      - description: Service visit ID
        in: path
        name: visit_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ServiceVisitResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get service visit by ID
      tags:
      - Service Visits
    put:
      consumes:
      - application/json
      description: Update an existing service visit record
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: string
      - description: Service visit ID
        in: path
        name: visit_id
        required: true
        type: string
      - description: Updated service visit data
        in: body
        name: service_visit
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateServiceVisitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ServiceVisitResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update service visit
      tags:
      - Service Visits
  /user/vehicles/{vehicle_id}/service-visits/last:
    get:
      consumes:
      - application/json
      description: Get the most recent service visit record for a specific user vehicle
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ServiceVisitResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get last service visit for a user vehicle
      tags:
      - Service Visits
  /users/me:
    delete:
      consumes:
      - application/json
      description: Delete the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get the profile information of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetProfileResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update the profile information of the authenticated user
      parameters:
      - description: Profile update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetProfileResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Users
  /users/me/change-password:
    put:
      consumes:
      - application/json
      description: Update the password of the authenticated user
      parameters:
      - description: Password update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user password
      tags:
      - Users
  /vehicles/hierarchy:
    get:
      consumes:
      - application/json
      description: Get the complete vehicle hierarchy including all types, brands,
        models, and generations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CompleteVehicleHierarchyResponse'
      summary: Get complete vehicle hierarchy
      tags:
      - Hierarchy
  /vehicles/types:
    get:
      consumes:
      - application/json
      description: Get a list of all available vehicle types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListVehicleTypesResponse'
      summary: List all vehicle types
      tags:
      - Types
  /vehicles/types/{type_id}:
    get:
      consumes:
      - application/json
      description: Get details of a specific vehicle type
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VehicleTypeResponse'
      summary: Get vehicle type details
      tags:
      - Types
  /vehicles/types/{type_id}/brands:
    get:
      consumes:
      - application/json
      description: Get a list of vehicle brands for a specific vehicle type
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListVehicleBrandsResponse'
      summary: List vehicle brands by type
      tags:
      - Brands
  /vehicles/types/{type_id}/brands/{brand_id}:
    get:
      consumes:
      - application/json
      description: Get details of a specific vehicle brand
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      - description: Vehicle Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VehicleBrandResponse'
      summary: Get vehicle brand details
      tags:
      - Brands
  /vehicles/types/{type_id}/brands/{brand_id}/models:
    get:
      consumes:
      - application/json
      description: Get a list of vehicle models for a specific vehicle brand
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      - description: Vehicle Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListVehicleModelsResponse'
      summary: List vehicle models by brand
      tags:
      - Models
  /vehicles/types/{type_id}/brands/{brand_id}/models/{model_id}:
    get:
      consumes:
      - application/json
      description: Get details of a specific vehicle model
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      - description: Vehicle Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      - description: Vehicle Model ID
        in: path
        name: model_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VehicleModelResponse'
      summary: Get vehicle model details
      tags:
      - Models
  /vehicles/types/{type_id}/brands/{brand_id}/models/{model_id}/generations:
    get:
      consumes:
      - application/json
      description: Get a list of vehicle generations for a specific vehicle model
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      - description: Vehicle Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      - description: Vehicle Model ID
        in: path
        name: model_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListVehicleGenerationsResponse'
      summary: List vehicle generations by model
      tags:
      - Generations
  /vehicles/types/{type_id}/brands/{brand_id}/models/{model_id}/generations/{generation_id}:
    get:
      consumes:
      - application/json
      description: Get details of a specific vehicle generation
      parameters:
      - description: Vehicle Type ID
        in: path
        name: type_id
        required: true
        type: string
      - description: Vehicle Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      - description: Vehicle Model ID
        in: path
        name: model_id
        required: true
        type: string
      - description: Vehicle Generation ID
        in: path
        name: generation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VehicleGenerationResponse'
      summary: Get vehicle generation details
      tags:
      - Generations
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Authentication operations
  name: Authentication
- description: User management operations
  name: Users
- description: User vehicle management
  name: User - Vehicles
- description: Service visit management operations
  name: Service Visits
- description: Oil change management operations
  name: Oil Changes
- description: Oil filter management operations
  name: Oil Filters
- description: Vehicle types management
  name: Types
- description: Vehicle brands management
  name: Brands
- description: Vehicle models management
  name: Models
- description: Vehicle generations management
  name: Generations
- description: Admin user management operations
  name: Admin - Users
- description: Admin user vehicle management operations
  name: Admin - UserVehicles
- description: Admin vehicle type management operations
  name: Admin - Types
- description: Admin vehicle brand management operations
  name: Admin - Brands
- description: Admin vehicle model management operations
  name: Admin - Models
- description: Admin vehicle generation management operations
  name: Admin - Generations
