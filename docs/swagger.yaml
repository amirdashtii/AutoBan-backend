basePath: /
definitions:
  dto.GetProfileResponse:
    description: User profile information response
    properties:
      email:
        description: |-
          User's email address (optional)
          @Example john.doe@example.com
        example: john.doe@example.com
        type: string
      first_name:
        description: |-
          User's first name (optional)
          @Example John
        example: John
        type: string
      last_name:
        description: |-
          User's last name (optional)
          @Example Doe
        example: Doe
        type: string
    type: object
  dto.GetSessionsResponse:
    description: Response containing list of user sessions
    properties:
      sessions:
        items:
          $ref: '#/definitions/dto.SessionResponse'
        type: array
    type: object
  dto.LoginRequest:
    description: User login request
    properties:
      password:
        description: |-
          Password must be at least 8 characters long and include uppercase, lowercase, and numbers
          @Example Password123
        example: Password123
        minLength: 8
        type: string
      phone_number:
        description: |-
          Iranian phone number in format 09XXXXXXXXX
          @Example 09123456789
        example: "09123456789"
        type: string
    required:
    - password
    - phone_number
    type: object
  dto.LogoutRequest:
    description: User logout request
    properties:
      refresh_token:
        description: |-
          JWT refresh token
          @Example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  dto.RefreshTokenRequest:
    description: Token refresh request
    properties:
      refresh_token:
        description: |-
          JWT refresh token
          @Example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  dto.RegisterRequest:
    description: User registration request
    properties:
      password:
        description: |-
          Password must be at least 8 characters long and include uppercase, lowercase, and numbers
          @Example Password123
        example: Password123
        minLength: 8
        type: string
      phone_number:
        description: |-
          Iranian phone number in format 09XXXXXXXXX
          @Example 09123456789
        example: "09123456789"
        type: string
    required:
    - password
    - phone_number
    type: object
  dto.SessionResponse:
    description: User session information
    properties:
      device_id:
        example: dev_1234567890
        type: string
      is_active:
        example: true
        type: boolean
      last_used:
        example: "2024-03-15T14:30:00Z"
        type: string
    type: object
  dto.TokenResponse:
    description: User login response containing access and refresh tokens
    properties:
      access_token:
        description: |-
          JWT access token
          @Example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        description: |-
          JWT refresh token
          @Example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  dto.UpdateProfileRequest:
    description: User profile update request
    properties:
      email:
        description: |-
          User's email address (optional)
          @Example john.doe@example.com
        example: john.doe@example.com
        type: string
      first_name:
        description: |-
          User's first name (optional)
          @Example John
        example: John
        type: string
      last_name:
        description: |-
          User's last name (optional)
          @Example Doe
        example: Doe
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for AutoBan.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: AutoBan API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login a user with phone number and password
      parameters:
      - description: User login details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - auth-public
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout a user by invalidating the refresh token
      parameters:
      - description: Refresh token to invalidate
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - auth-protected
  /api/v1/auth/logout-all:
    post:
      consumes:
      - application/json
      description: Logs out the user from all devices by invalidating all refresh
        tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout from all devices
      tags:
      - auth-protected
  /api/v1/auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Get new access and refresh tokens using a valid refresh token
      parameters:
      - description: Current refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - auth-public
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with phone number and password
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth-public
  /api/v1/auth/sessions:
    get:
      consumes:
      - application/json
      description: Returns all active sessions for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetSessionsResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user sessions
      tags:
      - auth-protected
  /api/v1/users/me:
    get:
      consumes:
      - application/json
      description: Get the profile information of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetProfileResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the profile information of the authenticated user
      parameters:
      - description: Profile update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetProfileResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
